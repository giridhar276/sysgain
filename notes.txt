

C - datatypes
------------
int a = 10;
int a[3] ={10,20,30};
float b = 345.34;
char
double
long
short


python - objects
-----
Everything in python is object.
** Every object contains methods**



number
-------
a = 10
a = 45.43
b = 345.34
val = 43.43
aval = 45.43


string
-------
string is defined in single or double or triple quotes.

aname = 'python progrogramming'
bname = "java programming"
cname = """unix shell scripting"""
dname = '''machine learning'''


list ( simlar to array in C )
-----
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list is defined in [].

alist = [10,20,30,40]
blist = ["python","java","unix"]
clist = [45,43.45,"python"]
dlist = [["rita",30],["sita",32],["gita",34]]  # list of lists


tuple ( immutable , unchangeable , uneditable)
-------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple is defined in ().
***** Elements inside tuple cannot be modified DIRECTLY *****

atup = (45,43,32,45,43)
btup = ("java","genai","datascience")
ctup = (45,5.34,"java","unix")
dtup = (("ravi",30),("sita",4))


dictionary ( hashmap   hash   json  associativearray)
-----------
dictionary is all about keys and values
In dictionary ... keys are UNIQUE
                  key is either number or string
                  value can be number, string , list , tuple , dictionary or dictionary of dictionaries.


syntax:  object = { key:value , key:value , key:value}
example:  book  = {"chap1": 10 ,"chap2":20 , "chap3":30 ,"chap4":40 }
          data = {1:2,3:4,5:6}
          lang = {1:"python",2:"java"}
        bookinfo={"chap1":["rita","US"],"chap2":["gita","UK"]}

    Index
    ------
chap1    10
chap2    20
chap3    30
chap4    40





set ( venn diagrams in schooling days)
-----
set is UNORDERED collection of UNIQUE elements of same type.

aset = {10,10,10,20,20,30,30}






task =      core programming    +  libraries    + domain 
           ( procedural or
             object oriented )


conditions
-----------
simple if
if else 
if-elif-elif-elif-elif-elif-else 


level1
level1
level1
level1
if cond:
    level2
    level2
    level2

level1
level1
level1 



if ( 1 < 2)  {
    printf()
 printf()
          printf()
}


control statements
------------------
for loop
while loop 


in C---> NOT allowed in python
-----
for ( i = 1 ; i<=10 ; i++)
{

}



operators
---------


arithmetic operators :  + -  *  %  / 

relational operators :    <   <=   >   >=  ==    !=

assignment operators :  

val = 10
val = val + 1     (or)    val+=1     
val = val - 1     (or)    val-=1


logical operators:
-----------------
and  or  not 


name = "python"
if name.islower()  and len(name) == 6 :     #If both the conditions are true
    # do something


if name.islower()  or len(name) == 6 :     #If one of the condition is True
    # do something


special operators :
------------------
in 
as
+
* 


methods   : methods are object specific ( string methods , list methods , dict methods )
functions : common everywhere.. eg. print()  range() input() .....



functions
--------
- builtin functions
- user defined functions 



builtin functions ( . is NOT required)
-----------------
print()
input()
range()
len()
type()
list()
tuple()
str()
int()
max()
min()
sum()
isinstance()
zip()
int()
str()
list()
tuple()
dict()
set()
help()
dir()
open()


print(dir(__builtins__))  # will display all the builtin functions and exceptions



file handling
--------------


.csv
xlsx
txt
zip
jpg
pbix
json
gif
mpeg
log 
xml 
yaml
7z
rar
tar
.gz
tar.gz 
pdf
docx
pptx
conf
.prop
.properties
.dll
.bat
mp3
mp4
jpeg
mpeg
dat


flat files       : which are opened directly in any OS. ( csv json  yaml txt  dat  prop)
third party files: we need to have third party tool to open the file ( xlsx pdf  mp4 )

** all the above third party files are accessible using library.



flat files  ( csv  conf log prop  dat json yaml  txt ....)
-----------



modes
-----
read
write
append

opening the file
-------------

#read mode
fobj = open("customers.txt","r")
-->  if the file is existing only .. we will be able to read the file


#write mode
fobj = open("customers.txt","w")
case1 : if file is not existing .. file will be creating first
case2: if file is already existing... it overwrites the content


#append mode
fobj = open("customers.txt","a")
case1 : if file is not existing .. file will be creating first
case2: if file is already existing... it appends the new content



closing the file 
----------------
fobj.close()


context manager

file read operations
--------------------

different ways of reading the file :

1. reading the file line by line using file object
2. fobj.readlines()
3. fobj.read()
4. using csv library
5. using pandas library



exception handling
-----------------

Basically, there are two types of errors.

1. syntax error
2. semantic error or logical error or runtime error.

Handling the errors that occurs during runtime is known exception handling

try
except
else
finally


libraries 
-----------



In C
-----
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<string.h>
#include<time.h>


python
-------
import csv 
import sys 


There are two types of libraries 

1. builtin library
-----------------
builtin libraries are installed with pyhon. ( Eg.   csv , sys , os )


2. third party library 
--------------------
Depending on the requirement( cloud automations, analytics , web , testing, gui ,excel automation) developer has to 
install third party library from www.pypi.org




How to I delete a file in python ?
--------------------------------
import os
os.remove("customers.txt")



How to display all the files ?
------------------------
os.listdir()


How the copy files from folder1 to folder2 ?
---------------------
import shutil
shutil.copy(sourcefile,destionatiopath)


display cpu utilization, memory usage etc ?
-------------------------------------
import psutil




################################### frequently used builtin libraries #############################

os         : os level activities
math       : mathematical operations
sys        :  sys and python config data
shutil     : copy,move, rmtree  etc
urllib     : read the web, downloading the files
logging    : logging all the events
smtplib    : sending the mails
ftplib     : performing ftp operations
sysconfig  :  sys and python config data
zipfile    : create/extract the zip files
rarfile    : create/extract the rar files
cryptopgraphy : encrypting and decrypting the data or files
tarfile    : create/extract the tar files
filecmp    : comparing files or directories
sqlite3    : python default database
csv        : reading/writing csv files
xml        : reading/writing xml files
calendar   : display month,year calendar info
datetime   : working with date n time
time       : working with date n time
fractions  : working with decimal values
glob       : display all the files
heapq      : more of array operations ( getting largest among list )
subprocess : executing system commands in python (  subprocess.getoutput("ls -ltr")
pdb        : python debugger
platform   : platform information
random     : random operations ( shuffling , random digit ... )
re         : grep + awk + sed
socket     : networking programming
stat       : stats of the file
statistics : basic statistics
pathlib	   : Object-oriented file path operations
time	     : Delays, timestamps, performance checks
logging	   : Logging for scripts/apps (replace print for real apps)
argparse	 : Command-line interface (CLI) argument parsing
configparser : 	Read/write .ini config files
json	     :Serialize/deserialize JSON (common in APIs)
uuid	     : Generate unique IDs (useful in files, databases)
statistics	:Basic stats: mean, median, stdev
random	    :Random number generation, sampling
collections	:Specialized containers (defaultdict, Counter, namedtuple)
traceback	   :Print/format exception tracebacks
warnings	   :Raise and handle warnings






