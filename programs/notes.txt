

C - datatypes
------------
int a = 10;
int a[3] ={10,20,30};
float b = 345.34;
char
double
long
short


python - objects
-----
Everything in python is object.
** Every object contains methods**



number
-------
a = 10
a = 45.43
b = 345.34
val = 43.43
aval = 45.43


string
-------
string is defined in single or double or triple quotes.

aname = 'python progrogramming'
bname = "java programming"
cname = """unix shell scripting"""
dname = '''machine learning'''


list ( simlar to array in C )
-----
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list is defined in [].

alist = [10,20,30,40]
blist = ["python","java","unix"]
clist = [45,43.45,"python"]
dlist = [["rita",30],["sita",32],["gita",34]]  # list of lists


tuple ( immutable , unchangeable , uneditable)
-------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple is defined in ().
***** Elements inside tuple cannot be modified DIRECTLY *****

atup = (45,43,32,45,43)
btup = ("java","genai","datascience")
ctup = (45,5.34,"java","unix")
dtup = (("ravi",30),("sita",4))


dictionary ( hashmap   hash   json  associativearray)
-----------
dictionary is all about keys and values
In dictionary ... keys are UNIQUE
                  key is either number or string
                  value can be number, string , list , tuple , dictionary or dictionary of dictionaries.


syntax:  object = { key:value , key:value , key:value}
example:  book  = {"chap1": 10 ,"chap2":20 , "chap3":30 ,"chap4":40 }
          data = {1:2,3:4,5:6}
          lang = {1:"python",2:"java"}
        bookinfo={"chap1":["rita","US"],"chap2":["gita","UK"]}

    Index
    ------
chap1    10
chap2    20
chap3    30
chap4    40





set ( venn diagrams in schooling days)
-----
set is UNORDERED collection of UNIQUE elements of same type.

aset = {10,10,10,20,20,30,30}






task =      core programming    +  libraries    + domain 
           ( procedural or
             object oriented )


conditions
-----------
simple if
if else 
if-elif-elif-elif-elif-elif-else 


level1
level1
level1
level1
if cond:
    level2
    level2
    level2

level1
level1
level1 



if ( 1 < 2)  {
    printf()
 printf()
          printf()
}


control statements
------------------
for loop
while loop 


in C---> NOT allowed in python
-----
for ( i = 1 ; i<=10 ; i++)
{

}



operators
---------


arithmetic operators :  + -  *  %  / 

relational operators :    <   <=   >   >=  ==    !=

assignment operators :  

val = 10
val = val + 1     (or)    val+=1     
val = val - 1     (or)    val-=1


logical operators:
-----------------
and  or  not 


name = "python"
if name.islower()  and len(name) == 6 :     #If both the conditions are true
    # do something


if name.islower()  or len(name) == 6 :     #If one of the condition is True
    # do something


special operators :
------------------
in 
as
+
* 